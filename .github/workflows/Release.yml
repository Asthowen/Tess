name: Publish Release

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  Check:
     runs-on: ubuntu-latest
     steps:
        - name: Checkout code
          uses: actions/checkout@v2
          
        - name: Installing dependencies
          run: |
            sudo apt install npm libcurl4-openssl-dev cmake git
        
        - name: Checking Tess Compilation
          run: |
            npm install
            npm run build
            
        - name: Checking Tess-cli Compilation
          run: |
            cd cli
            cmake . -B build
            cd build && make
            ./tess-cli -S --theme default

  Linux:
    needs: Check
    runs-on: ubuntu-latest
     
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
  Windows:
    needs: Check
    runs-on: ubuntu-latest
     
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
    
  DEB_Package:
    name: Creating Debian Package
    needs: Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Generating DEBIAN Package    
        run: |
          sudo apt-get install libcurl4-openssl-dev cmake git
          mkdir -p package/debian/tess/usr/lib/tess/
          
          npm install
          npm run build
          cp -r dist/linux-unpacked/* package/debian/tess/usr/lib/tess/
          
          cd cli
          cmake . -B build
          make -C build
          cp build/tess-cli ../package/debian/tess/usr/bin/
          cd ../
          printf "Package: Tess\nVersion: ${VERSION}\nArchitecture: all\nEssential: no\nPriority: optional\nDepends: npm,nodejs\nMaintainer: Squitch\nDescription: Tess is a simple terminal for a modern age\n" > package/debian/tess/DEBIAN/control
          cd package/debian
          sudo chmod 755 tess/DEBIAN/postinst 
          dpkg-deb --build tess
        env:
          VERSION: ${{ steps.get_release.outputs.tag_name }}
        
      - name: Upload release binary
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./package/debian/tess.deb
          asset_name: tess_${{ steps.get_release.outputs.tag_name }}-1_all.deb
          asset_content_type: application/octet-stream
          
      - name: Deploy to server
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          SOURCE: ./package/debian/tess.deb
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
          TARGET: ${{ secrets.REMOTE_TARGET }}tess_${{ steps.get_release.outputs.tag_name }}-1_all.deb
          
      - name: Update apt repository
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.REMOTE_PORT }}
          script: ${{ secrets.REMOTE_DEPLOY }}

          
  Pacman_Package:
    name: Creating Pacman Package
    needs: Linux
    runs-on: ubuntu-latest
    steps:
      - name: Downloading Files
        uses: actions/checkout@v2
        
      - name: Update PKGBUILD
        uses: 2m/arch-pkgbuild-builder@v1.16
        with:
          target: 'pkgbuild'
          pkgname: 'tess-git'
          
      - name: Renaming package
        run : |
          cd tess-git
          mv *.pkg.tar.zst tess-git-x86_64.pkg.tar.zst
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload release binary
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: tess-git/tess-git-x86_64.pkg.tar.zst
          asset_name: tess-git-x86_64.pkg.tar.zst
          asset_content_type: application/octet-stream
          
  RPM_Package:
    name: Creating RPM Package
    needs: Linux
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Generating RPM Package    
        run: |
          dnf install libcurl-devel gcc-c++ rpmdevtools nodejs cmake git openssl-devel -y
          
          mkdir -p ./package/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          
          printf '
          Name:           tess
          Version:        %s
          Release:        0
          Summary:        Tess is an terminal emulator
          License:        GPL
          Source0:        tess.tar.gz
          %%description
          Tess is a hackable, simple, rapid and beautiful terminal for the new era of technology.
          %%global debug_package %%{nil}
          %%prep
          %%setup -q
          %%build
          %%install
          rm -rf $RPM_BUILD_ROOT
          mkdir -p "$RPM_BUILD_ROOT/usr/bin/"
          mkdir -p "$RPM_BUILD_ROOT/usr/lib/tess/"
          mkdir -p "$RPM_BUILD_ROOT/usr/share/applications/"
          mkdir -p "$RPM_BUILD_ROOT/usr/share/pixmaps/"
          mkdir -p "$RPM_BUILD_ROOT/usr/share/kservices5/ServiceMenus/"
          mkdir -p "$RPM_BUILD_ROOT/usr/share/man/fr/man1"
          cp Tess.desktop "$RPM_BUILD_ROOT/usr/share/applications/"
          cp icon.png "$RPM_BUILD_ROOT/usr/share/pixmaps/tess.png"
          cp tesshere.desktop "$RPM_BUILD_ROOT/usr/share/kservices5/ServiceMenus/"
          cp appintess.desktop "$RPM_BUILD_ROOT/usr/share/kservices5/ServiceMenus/"
          cp -r app/* "$RPM_BUILD_ROOT/usr/lib/tess/"
          ln -s "/usr/lib/tess/tess" "$RPM_BUILD_ROOT/usr/bin/tess"
          cp tess.1 "$RPM_BUILD_ROOT/usr/share/man/fr/man1/"
          cp tess-cli.1 "$RPM_BUILD_ROOT/usr/share/man/fr/man1/"
          
          cp -r cli/tess-cli "$RPM_BUILD_ROOT/usr/bin/tess-cli"
          if type "$kbuildsycoca5" > /dev/null; then
            kbuildsycoca5
          fi
          %%files
          /usr/bin/*
          /usr/lib/tess/*
          /usr/share/applications/*
          /usr/share/pixmaps/*
          /usr/share/kservices5/ServiceMenus/*
          /usr/share/man/fr/man1/*
              
          ' "${VERSION}" > ./package/rpmbuild/SPECS/tess.spec
          
          mkdir -p ./package/rpmbuild/SOURCES/tess-${VERSION}/app
          mkdir -p ./package/rpmbuild/SOURCES/tess-${VERSION}/cli
          mkdir -p ./package/rpmbuild/SOURCES/tess-${VERSION}/man/fr/man1
          
          cp Tess.desktop ./package/rpmbuild/SOURCES/tess-${VERSION}/
          cp appintess.desktop ./package/rpmbuild/SOURCES/tess-${VERSION}/
          cp tesshere.desktop ./package/rpmbuild/SOURCES/tess-${VERSION}/
          cp build/icon.png ./package/rpmbuild/SOURCES/tess-${VERSION}/
          cp -r man/fr/man1/* ./package/rpmbuild/SOURCES/tess-${VERSION}/
          
          npm install
          npm run build
          cp -r dist/linux-unpacked/* package/rpmbuild/SOURCES/tess-${VERSION}/app/
          
          cd cli
          cmake . -B build
          make -C build
          cd ../
          
          cp cli/build/tess-cli package/rpmbuild/SOURCES/tess-${VERSION}/cli/tess-cli
                  
          cd package/rpmbuild/SOURCES
          tar zcvf tess.tar.gz ./*
          cd ../
          
          rpmbuild --define "_topdir `pwd`" -bb ./SPECS/tess.spec
          
        env:
          VERSION: ${{ steps.get_release.outputs.tag_name }}
        
      - name: Upload release binary
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./package/rpmbuild/RPMS/x86_64/tess-${{ steps.get_release.outputs.tag_name }}-0.x86_64.rpm
          asset_name: tess-${{ steps.get_release.outputs.tag_name }}-x86_64.rpm
          asset_content_type: application/octet-stream
          
          
  AUR_Package_tess-git:
    name: Updating AUR Tess-git Package
    needs: Linux
    runs-on: ubuntu-latest
    steps:
      - name: Downloading Files
        uses: actions/checkout@v2
      
      - name: Update PKGBUILD
        uses: 2m/arch-pkgbuild-builder@v1.16
        with:
          target: 'pkgbuild'
          pkgname: 'tess-git'
          
      - name: Update AUR Package
        uses: KSXGitHub/github-actions-deploy-aur@v2.2.4
        with:
          pkgname: tess-git
          pkgbuild: tess-git/PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update AUR package
          
  Inno_Setup_App:
    name: Creating Windows Setup
    needs: Windows
    runs-on: windows-latest
    steps:
      - name: Downloading Files
        uses: actions/checkout@v2
        
      - name: Installing MSVC
        uses: ilammy/msvc-dev-cmd@v1
     
      - name: Installing Make Dependencies
        run: |
          Invoke-WebRequest https://jrsoftware.org/download.php/is.exe -O setup.exe
          ./setup.exe /silent
          Invoke-WebRequest https://github.com/Kitware/CMake/releases/download/v3.21.3/cmake-3.21.3-windows-x86_64.msi -O cmake-setup.msi
          ./cmake-setup.msi /silent
          
      - name: Building App
        run: |
          npm install && npm run build-win
          cd cli
          cmake . -B build
          cd build
          cmake --build . --config Release
          cd Release
          cp .\tess-cli.exe ../../../dist/win-unpacked/
          cd ../../../
          
      - name: Packaging App
        run: |
          iscc setup.iss
          cd Output
          mv tess-0.5.3-setup.exe tess-setup.exe
          ls
          
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
          
      - name: Upload release binary
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: D:\a\Tess\Tess\Output\tess-setup.exe
          asset_name: tess-setup.exe
          asset_content_type: application/octet-stream
          
          
  Windows_Portable:
    name: Creating Windows Portable
    needs: Windows
    runs-on: windows-latest
    steps:
      - name: Downloading Files
        uses: actions/checkout@v2
        
      - name: Installing MSVC
        uses: ilammy/msvc-dev-cmd@v1
     
      - name: Installing Make Dependencies
        run: |
          Invoke-WebRequest https://github.com/Kitware/CMake/releases/download/v3.21.3/cmake-3.21.3-windows-x86_64.msi -O cmake-setup.msi
          ./cmake-setup.msi /silent
          
      - name: Building App
        run: |
          npm install && npm run build-win
          cd cli
          cmake . -B build
          cd build
          cmake --build .
          cd Debug
          cp .\tess-cli.exe ../../../dist/win-unpacked/
          cd ../../../
          
      - name: Packaging App
        run: |
          cd dist/win-unpacked/
          Compress-Archive ./* tess-portable.zip
          pwd
          ls
          
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
          
      - name: Upload release binary
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: D:\a\Tess\Tess\dist\win-unpacked\tess-portable.zip
          asset_name: tess-portable.zip
          asset_content_type: application/octet-stream
